{"version":3,"sources":["vendor/ember-cli/app-prefix.js","dropgif/app.js","dropgif/components/gif-row.js","dropgif/components/show-thumb.js","dropgif/components/zero-clipboard.js","dropgif/controllers/array.js","dropgif/controllers/gifs.js","dropgif/controllers/login.js","dropgif/controllers/object.js","dropgif/initializers/app-version.js","dropgif/initializers/export-application-global.js","dropgif/initializers/simple-auth-oauth2.js","dropgif/initializers/simple-auth.js","dropgif/mixins/in-viewport.js","dropgif/router.js","dropgif/routes/application.js","dropgif/routes/gifs.js","dropgif/routes/login.js","dropgif/templates/application.js","dropgif/templates/components/gif-row.js","dropgif/templates/components/show-thumb.js","dropgif/templates/components/zero-clipboard.js","dropgif/templates/gifs.js","dropgif/templates/login.js","dropgif/tests/app.jshint.js","dropgif/tests/components/gif-row.jshint.js","dropgif/tests/components/show-thumb.jshint.js","dropgif/tests/controllers/gifs.jshint.js","dropgif/tests/controllers/login.jshint.js","dropgif/tests/helpers/resolver.js","dropgif/tests/helpers/resolver.jshint.js","dropgif/tests/helpers/start-app.js","dropgif/tests/helpers/start-app.jshint.js","dropgif/tests/mixins/in-viewport.jshint.js","dropgif/tests/router.jshint.js","dropgif/tests/routes/application.jshint.js","dropgif/tests/routes/gifs.jshint.js","dropgif/tests/routes/login.jshint.js","dropgif/tests/test-helper.js","dropgif/tests/test-helper.jshint.js","dropgif/tests/unit/components/gif-row-test.js","dropgif/tests/unit/components/gif-row-test.jshint.js","dropgif/tests/unit/components/show-thumb-test.js","dropgif/tests/unit/components/show-thumb-test.jshint.js","dropgif/tests/unit/controllers/gifs-test.js","dropgif/tests/unit/controllers/gifs-test.jshint.js","dropgif/tests/unit/controllers/login-test.js","dropgif/tests/unit/controllers/login-test.jshint.js","dropgif/tests/unit/mixins/in-viewport-test.js","dropgif/tests/unit/mixins/in-viewport-test.jshint.js","dropgif/tests/unit/routes/application-test.js","dropgif/tests/unit/routes/application-test.jshint.js","dropgif/tests/unit/routes/gifs-test.js","dropgif/tests/unit/routes/gifs-test.jshint.js","dropgif/tests/unit/routes/login-test.js","dropgif/tests/unit/routes/login-test.jshint.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('dropgif/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'dropgif/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  var App;\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('dropgif/components/gif-row', ['exports', 'ember', 'dropgif/mixins/in-viewport'], function (exports, Ember, inViewport) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Component.extend(inViewport['default'], {});\n\n});","define('dropgif/components/show-thumb', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    tagName: 'a',\n    classNames: ['thumbnail'],\n    classNameBindings: ['gifLoaded:success'],\n    src: '',\n    cl: null,\n    path: null,\n    gif: null,\n    thumbUrl: '',\n    gifUrl: '',\n    isGifVisible: false,\n    gifLoaded: false,\n    gerSrc: (function () {\n      var cl = this.get('cl');\n      var path = this.get('path');\n\n      if (!this.get('thumbUrl') && this.get('isGifVisible')) {\n        this.set('thumbUrl', cl.thumbnailUrl(path, { size: 'l', httpCache: true }));\n      }\n    }).on('didInsertElement').observes('isGifVisible'),\n    gerGif: (function () {\n      var _this = this;\n      var cl = this.get('cl');\n      var path = this.get('path');\n\n      if (this.get('gifUrl')) {\n        this.set('showGif', true);\n      } else if (this.get('isGifVisible')) {\n\n        var img = this.$('img.preview');\n        var gif = this.$('img.gif');\n\n        gif.css('height', img.height());\n        gif.css('width', img.width());\n\n        cl.makeUrl(path, { download: true }, function (er, file) {\n          gif.on('load', function () {\n            gif.css('height', '');\n            gif.css('width', '');\n            gif.off('load');\n            _this.set('gifLoaded', true);\n          });\n          _this.set('gifUrl', file.url);\n          _this.set('showGif', true);\n        });\n      }\n    }).on('mouseEnter'),\n    backToThumb: (function () {\n      this.set('showGif', false);\n    }).on('mouseLeave')\n  });\n\n});","define('dropgif/components/zero-clipboard', ['exports', 'ember', 'ember-cli-zero-clipboard/components/zero-clipboard'], function (exports, Ember, ZeroClipboard) {\n\n\t'use strict';\n\n\texports['default'] = ZeroClipboard['default'];\n\n});","define('dropgif/controllers/array', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Controller;\n\n});","define('dropgif/controllers/gifs', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Controller.extend({\n    grifd: (function () {\n      var array = [];\n\n      this.get('content').forEach(function (file, i) {\n        if (i % 4 === 0) {\n          array.push([file]);\n        } else {\n          array.objectAt(array.length - 1).push(file);\n        }\n      });\n\n      return array;\n    }).property('content.@each')\n  });\n\n});","define('dropgif/controllers/login', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Controller.extend({\n    /*actions:{\n      authenticate: function() {\n        debugger;\n         var client = new Dropbox.Client({ key: \"vvf0ru33x9anjsx\" });\n         client.authenticate();\n         client.findByName('Photos','i_CVJ1wCmA0',function(){ \n          debugger\n        })\n        debugger;\n         return;\n        Em.$.ajax({\n          url:'https://www.dropbox.com/1/oauth2/authorize',\n          type:'GET',\n          crossDomain: true,\n          data:{\n            'client_id':'vvf0ru33x9anjsx',\n            'response_type':'token',\n            'redirect_uri':'http://localhost:4200/login'\n          },\n          accepts: 'application/json',\n            success: function(data) {\n              debugger\n            },\n            error: function(er) {\n              debugger\n            }\n        });\n         var data = this.getProperties('identification', 'password');\n        return this.get('session').authenticate('simple-auth-authenticator:oauth2-password-grant', data);\n      }\n    }*/\n    grifd: (function () {\n      var array = [];\n\n      this.get('content').forEach(function (file, i) {\n        if (i % 4 === 0) {\n          array.push([file]);\n        } else {\n          array.objectAt(array.length - 1).push(file);\n        }\n      });\n\n      return array;\n    }).property('content.@each')\n  });\n\n});","define('dropgif/controllers/object', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Controller;\n\n});","define('dropgif/initializers/app-version', ['exports', 'dropgif/config/environment', 'ember'], function (exports, config, Ember) {\n\n  'use strict';\n\n  var classify = Ember['default'].String.classify;\n  var registered = false;\n\n  exports['default'] = {\n    name: 'App Version',\n    initialize: function initialize(container, application) {\n      if (!registered) {\n        var appName = classify(application.toString());\n        Ember['default'].libraries.register(appName, config['default'].APP.version);\n        registered = true;\n      }\n    }\n  };\n\n});","define('dropgif/initializers/export-application-global', ['exports', 'ember', 'dropgif/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);\n\n    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {\n      window[classifiedName] = application;\n    }\n  }\n\n  ;\n\n  exports['default'] = {\n    name: 'export-application-global',\n\n    initialize: initialize\n  };\n\n});","define('dropgif/initializers/simple-auth-oauth2', ['exports', 'simple-auth-oauth2/configuration', 'simple-auth-oauth2/authenticators/oauth2', 'simple-auth-oauth2/authorizers/oauth2', 'dropgif/config/environment'], function (exports, Configuration, Authenticator, Authorizer, ENV) {\n\n  'use strict';\n\n  exports['default'] = {\n    name: 'simple-auth-oauth2',\n    before: 'simple-auth',\n    initialize: function initialize(container, application) {\n      Configuration['default'].load(container, ENV['default']['simple-auth-oauth2'] || {});\n      container.register('simple-auth-authorizer:oauth2-bearer', Authorizer['default']);\n      container.register('simple-auth-authenticator:oauth2-password-grant', Authenticator['default']);\n    }\n  };\n\n});","define('dropgif/initializers/simple-auth', ['exports', 'simple-auth/configuration', 'simple-auth/setup', 'dropgif/config/environment'], function (exports, Configuration, setup, ENV) {\n\n  'use strict';\n\n  exports['default'] = {\n    name: 'simple-auth',\n    initialize: function initialize(container, application) {\n      Configuration['default'].load(container, ENV['default']['simple-auth'] || {});\n      setup['default'](container, application);\n    }\n  };\n\n});","define('dropgif/mixins/in-viewport', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Mixin.create({\n    scrollTimeout: 100,\n    boundingClientRect: 0,\n    windowHeight: 0,\n    windowWidth: 0,\n\n    enteredViewport: (function () {\n      var rect, windowHeight, windowWidth, inViewport;\n      rect = this.get('boundingClientRect');\n      windowHeight = this.get('windowHeight');\n      windowWidth = this.get('windowWidth');\n      inViewport = rect.top >= 0 && rect.left >= 0 && rect.bottom <= windowHeight && rect.right <= windowWidth;\n      console.log(inViewport);\n      return inViewport;\n    }).property('boundingClientRect', 'windowHeight', 'windowWidth'),\n\n    exitedViewport: Ember['default'].computed.not('enteredViewport'),\n\n    _updateBoundingClientRect: function _updateBoundingClientRect() {\n      var el;\n      el = this.$()[0];\n      this.set('boundingClientRect', el.getBoundingClientRect());\n    },\n\n    _setup: (function () {\n      return Ember['default'].run.scheduleOnce('afterRender', this, function () {\n        this._updateBoundingClientRect();\n        this.set('windowHeight', window.innerHeight || document.documentElement.clientHeight);\n        this.set('windowWidth', window.innerWidth || document.documentElement.clientWidth);\n      });\n    }).on('didInsertElement'),\n\n    _scrollHandler: function _scrollHandler() {\n      return Ember['default'].run.debounce(this, '_updateBoundingClientRect', this.get('scrollTimeout'));\n    },\n\n    _bindScroll: (function () {\n      var scrollHandler;\n      scrollHandler = this._scrollHandler.bind(this);\n      Ember['default'].$(document).on('touchmove.scrollable', scrollHandler);\n      Ember['default'].$(window).on('scroll.scrollable', scrollHandler);\n    }).on('didInsertElement'),\n\n    _unbindScroll: (function () {\n      Ember['default'].$(window).off('.scrollable');\n      Ember['default'].$(document).off('.scrollable');\n    }).on('willDestroyElement')\n  });\n\n});","define('dropgif/router', ['exports', 'ember', 'dropgif/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  Router.map(function () {\n    this.route('login');\n    this.route('gifs', { path: '/' });\n  });\n\n  exports['default'] = Router;\n\n});","define('dropgif/routes/application', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({});\n\n  /*  beforeModel: function (transition) {\n      var client = new Dropbox.Client({ key: \"vvf0ru33x9anjsx\" });\n\n      client.authenticate();\n\n      debugger\n      if (client.isAuthenticated()) {\n        this.transitionTo('gifs');\n      };\n      \n\n      // this.set('dropboxClient',client);\n    }*/\n\n});","define('dropgif/routes/gifs', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    beforeModel: function beforeModel() {\n      var client = new Dropbox.Client({ key: 'vvf0ru33x9anjsx' });\n\n      client.authenticate();\n\n      this.set('dropboxClient', client);\n    },\n    model: function model() {\n      var client = this.get('dropboxClient');\n      return new Ember['default'].RSVP.Promise(function (resolve, reject) {\n        client.stat('Public/answgif', { readDir: true }, function (wtf, data, contents) {\n          resolve(contents);\n        });\n      });\n    },\n    setupController: function setupController(c, m) {\n      c.set('model', m);\n      c.set('dbClient', this.get('dropboxClient'));\n    }\n  });\n\n});","define('dropgif/routes/login', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({});\n\n  /*  beforeModel: function() {\n      var client = new Dropbox.Client({ key: \"vvf0ru33x9anjsx\" });\n\n      client.authenticate();\n\n      this.set('dropboxClient',client);\n    },\n    model:function () {\n      var client = this.get('dropboxClient');\n      return new Ember.RSVP.Promise(function(resolve,reject) {\n        client.stat('Public/answgif',{readDir:true},function (wtf,data,contents){\n          resolve(contents);\n        });\n      })\n    },\n    setupController:function (c, m) {\n      c.set('model',m);\n      c.set('dbClient',this.get('dropboxClient'));\n    }*/\n\n});","define('dropgif/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"container\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"page-header\");\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"h1\");\n        var el4 = dom.createTextNode(\"- Псс, парень. Хочешь немного гифок? \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),3,3);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('dropgif/templates/components/gif-row', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"col-md-3\");\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);\n          inline(env, morph0, context, \"show-thumb\", [], {\"gif\": get(env, context, \"file\"), \"path\": get(env, context, \"file.path\"), \"cl\": get(env, context, \"dbClient\"), \"isGifVisible\": get(env, context, \"enteredViewport\")});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"each\", [get(env, context, \"row\")], {\"keyword\": \"file\"}, child0, null);\n        content(env, morph1, context, \"yield\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('dropgif/templates/components/show-thumb', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"img\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"img\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"caption text-right\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"small\");\n        dom.setAttribute(el2,\"class\",\"pull-left text-left\");\n        var el3 = dom.createTextNode(\" \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\" \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        dom.setAttribute(el2,\"href\",\"#\");\n        dom.setAttribute(el2,\"class\",\"btn btn-default btn-sm\");\n        dom.setAttribute(el2,\"role\",\"button\");\n        var el3 = dom.createTextNode(\"Link\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var element1 = dom.childAt(fragment, [2]);\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [4, 1]),1,1);\n        var morph1 = dom.createMorphAt(fragment,6,6,contextualElement);\n        element(env, element0, context, \"bind-attr\", [], {\"src\": \"gifUrl\", \"class\": \"showGif::hide :gif\"});\n        element(env, element1, context, \"bind-attr\", [], {\"src\": \"thumbUrl\", \"class\": \"showGif:hide :preview\"});\n        content(env, morph0, context, \"gif.name\");\n        content(env, morph1, context, \"yield\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('dropgif/templates/components/zero-clipboard', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"button\");\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, element = hooks.element, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var morph0 = dom.createMorphAt(element0,0,0);\n        element(env, element0, context, \"bind-attr\", [], {\"class\": get(env, context, \"innerClass\")});\n        content(env, morph0, context, \"label\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('dropgif/templates/gifs', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          inline(env, morph0, context, \"gif-row\", [], {\"class\": \"row\", \"row\": get(env, context, \"row\"), \"dbClient\": get(env, context, \"dbClient\")});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"each\", [get(env, context, \"grifd\")], {\"keyword\": \"row\"}, child0, null);\n        content(env, morph1, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('dropgif/templates/login', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          inline(env, morph0, context, \"gif-row\", [], {\"class\": \"row\", \"row\": get(env, context, \"row\"), \"dbClient\": get(env, context, \"dbClient\")});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"each\", [get(env, context, \"grifd\")], {\"keyword\": \"row\"}, child0, null);\n        content(env, morph1, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('dropgif/tests/app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('app.js should pass jshint', function() { \n    ok(true, 'app.js should pass jshint.'); \n  });\n\n});","define('dropgif/tests/components/gif-row.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/gif-row.js should pass jshint', function() { \n    ok(true, 'components/gif-row.js should pass jshint.'); \n  });\n\n});","define('dropgif/tests/components/show-thumb.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/show-thumb.js should pass jshint', function() { \n    ok(true, 'components/show-thumb.js should pass jshint.'); \n  });\n\n});","define('dropgif/tests/controllers/gifs.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/gifs.js should pass jshint', function() { \n    ok(true, 'controllers/gifs.js should pass jshint.'); \n  });\n\n});","define('dropgif/tests/controllers/login.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/login.js should pass jshint', function() { \n    ok(true, 'controllers/login.js should pass jshint.'); \n  });\n\n});","define('dropgif/tests/helpers/resolver', ['exports', 'ember/resolver', 'dropgif/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('dropgif/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/resolver.js should pass jshint', function() { \n    ok(true, 'helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('dropgif/tests/helpers/start-app', ['exports', 'ember', 'dropgif/app', 'dropgif/router', 'dropgif/config/environment'], function (exports, Ember, Application, Router, config) {\n\n  'use strict';\n\n\n\n  exports['default'] = startApp;\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n\n});","define('dropgif/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/start-app.js should pass jshint', function() { \n    ok(true, 'helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('dropgif/tests/mixins/in-viewport.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - mixins');\n  test('mixins/in-viewport.js should pass jshint', function() { \n    ok(true, 'mixins/in-viewport.js should pass jshint.'); \n  });\n\n});","define('dropgif/tests/router.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('router.js should pass jshint', function() { \n    ok(true, 'router.js should pass jshint.'); \n  });\n\n});","define('dropgif/tests/routes/application.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/application.js should pass jshint', function() { \n    ok(true, 'routes/application.js should pass jshint.'); \n  });\n\n});","define('dropgif/tests/routes/gifs.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/gifs.js should pass jshint', function() { \n    ok(false, 'routes/gifs.js should pass jshint.\\nroutes/gifs.js: line 17, col 7, Missing semicolon.\\nroutes/gifs.js: line 5, col 22, \\'Dropbox\\' is not defined.\\nroutes/gifs.js: line 13, col 52, \\'reject\\' is defined but never used.\\n\\n3 errors'); \n  });\n\n});","define('dropgif/tests/routes/login.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/login.js should pass jshint', function() { \n    ok(true, 'routes/login.js should pass jshint.'); \n  });\n\n});","define('dropgif/tests/test-helper', ['dropgif/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n});","define('dropgif/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('test-helper.js should pass jshint', function() { \n    ok(true, 'test-helper.js should pass jshint.'); \n  });\n\n});","define('dropgif/tests/unit/components/gif-row-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('gif-row', 'Unit | Component | gif row', {\n    // Specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar'],\n    unit: true\n  });\n\n  ember_qunit.test('it renders', function (assert) {\n    assert.expect(2);\n\n    // Creates the component instance\n    var component = this.subject();\n    assert.equal(component._state, 'preRender');\n\n    // Renders the component to the page\n    this.render();\n    assert.equal(component._state, 'inDOM');\n  });\n\n});","define('dropgif/tests/unit/components/gif-row-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/gif-row-test.js should pass jshint', function() { \n    ok(true, 'unit/components/gif-row-test.js should pass jshint.'); \n  });\n\n});","define('dropgif/tests/unit/components/show-thumb-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('show-thumb', 'Unit | Component | show thumb', {\n    // Specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar'],\n    unit: true\n  });\n\n  ember_qunit.test('it renders', function (assert) {\n    assert.expect(2);\n\n    // Creates the component instance\n    var component = this.subject();\n    assert.equal(component._state, 'preRender');\n\n    // Renders the component to the page\n    this.render();\n    assert.equal(component._state, 'inDOM');\n  });\n\n});","define('dropgif/tests/unit/components/show-thumb-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/show-thumb-test.js should pass jshint', function() { \n    ok(true, 'unit/components/show-thumb-test.js should pass jshint.'); \n  });\n\n});","define('dropgif/tests/unit/controllers/gifs-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('controller:gifs', {});\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('dropgif/tests/unit/controllers/gifs-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers');\n  test('unit/controllers/gifs-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/gifs-test.js should pass jshint.'); \n  });\n\n});","define('dropgif/tests/unit/controllers/login-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('controller:login', {});\n\n  // Replace this with your real tests.\n  ember_qunit.test('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('dropgif/tests/unit/controllers/login-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers');\n  test('unit/controllers/login-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/login-test.js should pass jshint.'); \n  });\n\n});","define('dropgif/tests/unit/mixins/in-viewport-test', ['ember', 'dropgif/mixins/in-viewport', 'qunit'], function (Ember, InViewportMixin, qunit) {\n\n  'use strict';\n\n  qunit.module('Unit | Mixin | in viewport');\n\n  // Replace this with your real tests.\n  qunit.test('it works', function (assert) {\n    var InViewportObject = Ember['default'].Object.extend(InViewportMixin['default']);\n    var subject = InViewportObject.create();\n    assert.ok(subject);\n  });\n\n});","define('dropgif/tests/unit/mixins/in-viewport-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/mixins');\n  test('unit/mixins/in-viewport-test.js should pass jshint', function() { \n    ok(true, 'unit/mixins/in-viewport-test.js should pass jshint.'); \n  });\n\n});","define('dropgif/tests/unit/routes/application-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('route:application', 'Unit | Route | application', {});\n\n  ember_qunit.test('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('dropgif/tests/unit/routes/application-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/application-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/application-test.js should pass jshint.'); \n  });\n\n});","define('dropgif/tests/unit/routes/gifs-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('route:gifs', 'Unit | Route | gifs', {});\n\n  ember_qunit.test('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('dropgif/tests/unit/routes/gifs-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/gifs-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/gifs-test.js should pass jshint.'); \n  });\n\n});","define('dropgif/tests/unit/routes/login-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor('route:login', 'Unit | Route | login', {});\n\n  ember_qunit.test('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('dropgif/tests/unit/routes/login-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/login-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/login-test.js should pass jshint.'); \n  });\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('dropgif/config/environment', ['ember'], function(Ember) {\n  var prefix = 'dropgif';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"dropgif/tests/test-helper\");\n} else {\n  require(\"dropgif/app\")[\"default\"].create({\"name\":\"dropgif\",\"version\":\"0.0.0.c3003c93\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjtGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"dropgif.js"}